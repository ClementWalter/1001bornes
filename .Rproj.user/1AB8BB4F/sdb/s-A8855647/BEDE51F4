{
    "collab_server" : "",
    "contents" : "library(shinydashboard)\nlibrary(leaflet)\nlibrary(dplyr)\nlibrary(magrittr)\nlibrary(ggmap)\nlibrary(curl) # make the jsonlite suggested dependency explicit\n\nfunction(input, output, session) {\n\n  # load data\n  # gares <- rgdal::readOGR(\"data/gares-du-reseau-ferre-dile-de-france/gares-du-reseau-ferre-dile-de-france.shp\")\n  # socio <- rgdal::readOGR(\"data/DATA/socioprofessionel.shp\")\n  # rural <- rgdal::readOGR(\"data/zonage/74_rural.shp\")\n  # urbain <- rgdal::readOGR(\"data/zonage/paris_urbain.shp\")\n  # zone <- sp::rbind.SpatialPolygonsDataFrame(rural, urbain)\n  # zone$segment <- factor(x = c(\"rural\", \"urbain\"))\n  # bus <- rgdal::readOGR(\"data/depots_bus/depots_bus.shp\")\n  # bornes <- rgdal::readOGR(\"data/bornes_recharges_elec/IRVE-201605-1-_epsg3857.shp\")\n  # save(list = c(\"gares\", \"socio\", \"zone\", \"bus\", \"bornes\"),\n  #      file = \"national_bin\")\n  load(\"national_bin\")\n  \n  socio$segment <- factor(unlist(lapply(lapply(strsplit(x = as.character(socio$segment), split = \"_\"), tail, -1), paste, collapse = \" \")))\n  pal_socio <- colorFactor(heat.colors(5), socio$segment)\n\n  pal_zone <- colorFactor(palette = c(\"darkgreen\", \"darkgrey\"), domain = zone$segment)\n  pariscenter <- list(lat = 48.822429, lng = 2.314383)\n  savoiecenter <- list(lat = 46.076489, lng = 6.257019)\n\n  ratpIcon <- makeIcon(\n    iconUrl = \"data/icons/Sigle-RATP.png\",\n    iconWidth = 28, iconHeight = 28,\n    iconAnchorX = 22, iconAnchorY = 94\n  )\n\n  bornesIcon <- makeIcon(\n    iconUrl = \"data/icons/voiture-electrique-logo.png\",\n    iconWidth = 28, iconHeight = 14,\n    iconAnchorX = 22, iconAnchorY = 94\n  )\n  \n  garesIcon <- makeIcon(\n    iconUrl = \"data/icons/sncf_logo2005-940x510-383x208.png\",\n    iconWidth = 28, iconHeight = 15,\n    iconAnchorX = 22, iconAnchorY = 94\n  )\n  \n  # load urbain\n  # bt_aerien_urbain <- rgdal::readOGR(\"data/urbain/bt_aerien_2.shp\")\n  # bt_sout_urbain <- rgdal::readOGR(\"data/urbain/bt_sout_2.shp\")\n  # # building_urbain <- rgdal::readOGR(\"data/urbain/building_urbain.shp\")\n  # conso_elect_urbain <- rgdal::readOGR(\"data/urbain/consoElec_urbain.shp\")\n  # grdf_cana_urbain <- rgdal::readOGR('data/urbain/GRDF_CANA_PARIS_final_2.shp')\n  # hta_sout_urbain <- rgdal::readOGR(\"data/urbain/hta_sout_2.shp\")\n  # iris_urbain <- rgdal::readOGR(\"data/urbain/iris_urbain.shp\")\n  # parking_urbain <- rgdal::readOGR(\"data/urbain/parking_urbain.shp\")\n  # recens_urbain <- rgdal::readOGR(\"data/urbain/recens_urbain.shp\")\n  # # routes_paris <- rgdal::readOGR(\"data/urbain/routes_paris.shp\")\n  # \n  # save(list = c(\"bt_aerien_urbain\",\n  #               \"bt_sout_urbain\",\n  #               \"conso_elect_urbain\",\n  #               \"grdf_cana_urbain\",\n  #               \"hta_sout_urbain\",\n  #               \"iris_urbain\",\n  #               \"parking_urbain\",\n  #               \"recens_urbain\"),\n  #     file = \"urbain_bin\")\n  load(\"urbain_bin\")\n\n  # load rural\n  # # building_rural <- rgdal::readOGR(\"data/rural/building_rural.shp\")\n  # iris_rural <- rgdal::readOGR(\"data/rural/iris_rural.shp\")\n  # recens_rural <- rgdal::readOGR(\"data/rural/recens_rural.shp\")\n  # routes_rural <- rgdal::readOGR(\"data/rural/routes_rural.shp\")\n  # \n  # save(list = c(\"iris_rural\", \"recens_rural\", \"routes_rural\"),\n  #      file = \"rural_bin\")\n  load(\"rural_bin\")\n  \n  # render map\n  output$map <- renderLeaflet({\n    token = \"pk.eyJ1IjoiY2xlbWxhZmxlbW1lIiwiYSI6ImNqNGlqdGZmOTA5MWwyd283dG9pdDUxdzUifQ.3MfyxhnJO0oMIAq6TVkuLw\"\n\n    recens_urbain$jeune <- (as.numeric(as.character(recens_urbain$POP_18_24)) + as.numeric(as.character(recens_urbain$POP_25_39))) / as.numeric(as.character(recens_urbain$POP))\n    conso_elect_urbain$conso <- as.numeric(as.character(conso_elect_urbain$energie_BT.1)) + as.numeric(as.character(conso_elect_urbain$energie_BT.2)) + as.numeric(as.character(conso_elect_urbain$energie_HT))\n    \n    leaflet() %>%\n      addTiles(\n        urlTemplate = paste0(\"//{s}.tiles.mapbox.com/v4/mapbox.light/{z}/{x}/{y}.png?access_token=\", token),\n        attribution = 'Maps by <a href=\"http://www.mapbox.com/\">Mapbox</a>'\n      ) %>%\n      setView(lat = 46.84, lng = 2.42, zoom = 6) %>%\n      \n      # add urbain polylines\n      addPolylines(data = bt_aerien_urbain, group = \"bt\") %>%\n      addPolylines(data = bt_sout_urbain, group = \"bt\") %>%\n      addPolylines(data = grdf_cana_urbain, group = \"grdf\") %>%\n      addPolylines(data = hta_sout_urbain, group = \"hta\") %>%\n\n      # addPolygons(data = iris_urbain) %>%\n      # add urban polygons\n      addPolygons(data = parking_urbain, group = \"parking\") %>%\n      addPolygons(data = recens_urbain, group = \"recens\",\n                  fillColor = ~colorNumeric(\"Reds\", domain = c(0, 1))(jeune),\n                  stroke = FALSE, fillOpacity = 0.8,\n                  popup = ~paste(\"Pourcentage de la population sous 40 ans :\", 100*round(jeune,digits = 2))) %>%\n\n      # add urban dots\n      addCircles(data = conso_elect_urbain, group = \"conso\", \n                 popup = ~paste(conso, \"kWh/an\"),\n                 color = ~colorNumeric(\"Blues\", domain = NULL)(conso)) %>%\n\n      # add national data\n      addPolygons(data = zone,\n                  fillOpacity = 0, stroke = TRUE, color = ~pal_zone(segment), fill = FALSE, group = \"zone\") %>%\n      addPolygons(data = socio,\n                  fillColor = ~pal_socio(segment), popup = socio$segment, stroke = FALSE, color = \"white\", group = \"socio\") %>%\n      addMarkers(data = bus, group = \"ratp\",icon = ratpIcon) %>%\n      addMarkers(data = bornes, group = \"bornes\", icon = bornesIcon) %>%\n      addMarkers(data = gares, group = \"gares\", icon = garesIcon) %>%\n\n      # add rural polylines\n      addPolygons(data = recens_rural, group = \"recens\") %>%\n      addPolylines(data = routes_rural, group = \"route\")\n  })\n  \n  groups <- c(\"bt\", \"grdf\", \"hta\", \"parking\", \"recens\", \"conso\", \"zone\", \"socio\", \"ratp\", \"bornes\", \"gares\", \"route\")\n  # Observe update map\n  observe({\n    # toggle layers\n    map_tmp <- leafletProxy('map') %>% hideGroup(group = groups)\n    for(g in groups){\n      if(g %in% input$selectLayer) map_tmp %<>% showGroup(g)\n    }\n    map_tmp\n  })\n  \n  # observe slide plugs\n  observeEvent(input$numberPlugs,{\n    # add plugs\n    N <- input$numberPlugs\n    bound <- input$map_bounds\n    # lat_range = abs(bound$south - bound$north)\n    # lng_range <- abs(bound$west - bound$east)\n    # \n    \n    if(N > 0 && !is.null(bound)){\n      # plugs <- DiceDesign::discrepESE_LHS(matrix(runif(2*N), 10, 2))$design\n      # plugs <- t(plugs)*range + start\n      clat <- runif(N, min = bound$south, max = bound$north)\n      clng <- runif(N, min = bound$west, max = bound$east)\n      hash <- sapply(clat*clng, digest::digest)\n      leafletProxy('map') %>% clearGroup(group = \"togglePlugs\") %>%\n        addMarkers(lat = clat,\n                   lng = clng, group = \"togglePlugs\",\n                   layerId = hash)\n    } else {\n      leafletProxy('map') %>% clearGroup(group = \"togglePlugs\")\n    }\n  })\n  \n  # observe the marker click\n  observeEvent(input$map_marker_click, {\n    click <- input$map_marker_click\n    id <- click$id\n    leafletProxy(\"map\") %>% removeMarker(layerId = id)\n  })\n  \n  # observe clear button\n  observeEvent(input$removePlugs, {\n    leafletProxy('map') %>% clearGroup(group = \"togglePlugs\") %>% clearGroup(group = \"manualPlugs\")\n  })\n  \n  # Observe click to add marker\n  observeEvent(input$map_click, {\n    ## Get the click info like had been doing\n    click <- input$map_click\n    clat <- click$lat\n    clng <- click$lng\n    hash <- digest::digest(clng*clat)\n    \n    leafletProxy('map') %>% # use the proxy to save computation\n      addMarkers(lng=clng, lat=clat, layerId = digest::digest(clng*clat), group = \"manualPlugs\")\n  })\n  \n  # Observe toggle legend\n  observeEvent(input$showLegend, {\n    if(input$showLegend){\n      leafletProxy('map') %>%\n        addLegend(position = \"bottomright\", pal = pal_socio, values = socio$segment,\n                  title = \"Cat. socio-professionnelle\",\n                  opacity = 0.6) %>%\n        addLegend(position = \"bottomright\", pal = pal_zone, values = zone$segment,\n                  title = \"Zone\",\n                  opacity = 0.6)\n    } else {\n      leafletProxy('map') %>% clearControls()\n    }\n  })\n  \n  # Observe zoom click\n  observeEvent(input$showParis,{\n    leafletProxy('map') %>% setView(lat = pariscenter$lat, lng = pariscenter$lng, zoom = 13)\n  })\n  observeEvent(input$showSavoie,{\n    leafletProxy('map') %>% setView(lat = savoiecenter$lat, lng = savoiecenter$lng, zoom = 11)\n  })\n}\n",
    "created" : 1498738841366.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2697353177",
    "id" : "BEDE51F4",
    "lastKnownWriteTime" : 1498827488,
    "last_content_update" : 1498827488075,
    "path" : "/Volumes/Stockage/Documents/Code/086-bus-dashboard/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}