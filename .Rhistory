map <- leaflet() %>%
addTiles(
urlTemplate = "'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png?boundary=administrative+admin_level=2"
) %>%
setView(lat = 46.08, lng = 6.5, zoom = 9)
library(shinydashboard)
library(leaflet)
library(dplyr)
library(curl) # make the jsonlite suggested dependency explicit
output$map <- renderLeaflet({
map <- leaflet() %>%
addTiles(
urlTemplate = "'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png?boundary=administrative+admin_level=2"
) %>%
setView(lat = 46.08, lng = 6.5, zoom = 9)
# %>%
#   addPolylines(data = cana_head, color = 'red', fill = TRUE)
# rezoom <- "first"
# # If zoom button was clicked this time, and store the value, and rezoom
# if (!identical(lastZoomButtonValue, input$zoomButton)) {
#   lastZoomButtonValue <<- input$zoomButton
#   rezoom <- "always"
# }
#
# map <- map %>% mapOptions(zoomToLimits = rezoom)
map
})
map <- leaflet() %>%
addTiles(
urlTemplate = "'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png?boundary=administrative+admin_level=2"
) %>%
setView(lat = 46.08, lng = 6.5, zoom = 9)
map
map <- leaflet() %>%
addTiles(
urlTemplate = "'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
) %>%
setView(lat = 46.08, lng = 6.5, zoom = 9)
map
shiny::runApp()
runApp()
runApp()
runApp()
map <- leaflet() %>%
addTiles(
urlTemplate = paste0("//{s}.tiles.mapbox.com/v4/mapbox.light/{z}/{x}/{y}.png?access_token=", token),
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(lat = 46.08, lng = 6.5, zoom = 9)
token = "pk.eyJ1IjoiY2xlbWxhZmxlbW1lIiwiYSI6ImNqNGlqdGZmOTA5MWwyd283dG9pdDUxdzUifQ.3MfyxhnJO0oMIAq6TVkuLw"
map <- leaflet() %>%
addTiles(
urlTemplate = paste0("//{s}.tiles.mapbox.com/v4/mapbox.light/{z}/{x}/{y}.png?access_token=", token),
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(lat = 46.08, lng = 6.5, zoom = 9)
map
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
token = "pk.eyJ1IjoiY2xlbWxhZmxlbW1lIiwiYSI6ImNqNGlqdGZmOTA5MWwyd283dG9pdDUxdzUifQ.3MfyxhnJO0oMIAq6TVkuLw"
map <- leaflet() %>%
addTiles(
urlTemplate = paste0("//{s}.tiles.mapbox.com/v4/mapbox.light/{z}/{x}/{y}.png?access_token=", token),
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(lat = 46.08, lng = 6.5, zoom = 9)
map
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
map$x
map
map$width
map$height
map$sizingPolicy
map$jsHooks
map$preRenderHook()
map$dependencies
map$elementId
plugs <- map$x + matrix(rnorm(20), 10, 2)
map$x
map$x$setView[[1]]
plugs <- map$x$setView[[1]] + matrix(rnorm(20), 10, 2)
map %>%
addMarkers(lng = plugs[,1], lat = plugs[,2])
plugs
map %>%
addMarkers(lng = 46.08, lat = 6.5)
map %>%
addMarkers(lat = 46.08, lng = 6.5)
x <- c(1:2)
x <- c(1:10)
matrix(runif(20), 10, 2) + x
matrix(runif(20), 2, 10) + c(1, 10)
map$x$setView[[1]]
map %>%
addMarkers(lat = plugs[1,], lng = plugs[2,])
plugs <- map$x$setView[[1]] + matrix(rnorm(20), 2, 10)
plugs
map %>%
addMarkers(lat = plugs[1,], lng = plugs[2,])
N <- 20
plugs <- map$x$setView[[1]] + matrix(runif(N, -0.1, 0.1), 2, N)
map %>%
addMarkers(lat = plugs[1,], lng = plugs[2,])
dim(plugs)
plugs
plugs <- map$x$setView[[1]] + matrix(runif(N, -0.1, 0.1), 2, N)
map %>%
addMarkers(lat = plugs[1,], lng = plugs[2,])
N
N <- 100
N <- 1
plugs <- map$x$setView[[1]] + matrix(runif(N, -0.1, 0.1), 2, N)
plugs
map %>%
addMarkers(lat = plugs[1,], lng = plugs[2,])
N <- 2
plugs <- map$x$setView[[1]] + matrix(runif(N, -0.1, 0.1), 2, N)
map %>%
addMarkers(lat = plugs[1,], lng = plugs[2,])
N <- 3
plugs <- map$x$setView[[1]] + matrix(runif(N, -0.1, 0.1), 2, N)
plugs
map %>%
addMarkers(lat = plugs[1,], lng = plugs[2,])
plugs <- map$x$setView[[1]] + matrix(runif(N, -0.5, 0.5), 2, N)
map %>%
addMarkers(lat = plugs[1,], lng = plugs[2,])
runApp()
runApp()
runApp()
plugs
map <- leaflet() %>% addTiles()
N <- 6
points <- map$x$setView[[1]] + matrix(runif(N, -0.5, 0.5), 2, N)
runApp()
runApp()
icon("paypal")
runApp()
leafIcons <- icons(
iconUrl = ifelse(quakes1$mag < 4.6,
"http://leafletjs.com/examples/custom-icons/leaf-green.png",
"http://leafletjs.com/examples/custom-icons/leaf-red.png"
),
iconWidth = 38, iconHeight = 95,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "http://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62
)
leafIcons <- icons(
iconUrl = "http://leafletjs.com/examples/custom-icons/leaf-green.png"
),
iconWidth = 38, iconHeight = 95,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "http://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62
)
leafIcons <- icons(
iconUrl = "http://leafletjs.com/examples/custom-icons/leaf-green.png",
iconWidth = 38, iconHeight = 95,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "http://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62
)
leafIcons
makeIcon("ferry-18.png", "ferry-18@2x.png", 18, 18)
?makeIcon
file_text <- readr::read_file(
paste0(.libPaths()[1],
"/leaflet/htmlwidgets/plugins/Leaflet.awesome-markers/font-awesome.min.css")
)
icon_names <- stringr::str_extract_all(file_text, "(fa-)([^:]+)")[[1]]
icon_names <- icon_names[-(1:36)] %>%
stringr::str_sub(4, -1)
icon_names
makeIcon("glass")
icon_names <- stringr::str_extract_all(file_text, "(fa-)([^:]+)")[[1]]
icon_names[[1]]
icon_names <- icon_names[-(1:36)] %>%
stringr::str_sub(4, -1)
sort(icon_names)
file_text
awesomeIcons("yelp")
?makeIcon
makeIcon("ferry-18.png", "ferry-18@2x.png", 18, 18)
runApp()
runApp()
install.packages("revgeocode")
install.packages('ggmap')
runApp()
?reactive
runApp()
?addCircleMarkers
runApp()
runApp()
leafletProxy('map') %>% # use the proxy to save computation
# removeMarker() %>%
addMarkers(lng=clng, lat=clat)
map %>% removeMarker()
?removeMarker
runApp()
socio <- rgdal::readOGR("data/DATA/socioprofessionel.shp")
class(socio)
map
token = "pk.eyJ1IjoiY2xlbWxhZmxlbW1lIiwiYSI6ImNqNGlqdGZmOTA5MWwyd283dG9pdDUxdzUifQ.3MfyxhnJO0oMIAq6TVkuLw"
map <- leaflet() %>%
addTiles(
urlTemplate = paste0("//{s}.tiles.mapbox.com/v4/mapbox.light/{z}/{x}/{y}.png?access_token=", token),
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(lat = 46.08, lng = 6.5, zoom = 9)
map
map %>% addPolygons(data = socio)
socio$id
socio$segment
map %>% addPolygons(data = socio, fillColor = segment)
map %>% addPolygons(data = socio, fillColor = socio$segment)
?addPolygons
map %>% addPolygons(data = socio, fillColor = colorQuantile(socio$segment))
map %>% addPolygons(data = socio, fillColor = colorFactor(socio$segment))
?topo.colors()
map %>% addPolygons(data = socio, fillColor = colorFactor("Blue", socio$segment)(segment))
map %>% addPolygons(data = socio, fillColor = ~colorFactor("Blue", socio$segment)(segment))
socio$segment
map %>% addPolygons(data = socio, fillColor = ~colorFactor("Blue", socio$segment)(segment), popup = socio$segment)
map %>% addPolygons(data = socio, fillColor = ~colorFactor(heat.colors(5), socio$segment)(segment), popup = socio$segment)
map %>% addPolygons(data = socio, fillColor = ~colorFactor(heat.colors(5), socio$segment)(segment), popup = socio$segment, border = "white")
runApp()
?addPolygons
map %>% addPolygons(data = socio, fillColor = ~colorFactor(heat.colors(5), socio$segment)(segment), popup = socio$segment, color = "white")
runApp()
runApp()
runApp()
runApp()
runApp()
input$map_click$.nonce
input$map_click_id
input$map_click
map$elementId
mm <- leafletProxy('map')
mm$id
mm$session
runApp()
library(filehash)
install.packages('digest')
install.packages("digest")
install.packages("digest")
install.packages("digest")
library(digest)
map
map %>% removeMarker(layerId = "sfg")
library(shinydashboard)
library(leaflet)
library(dplyr)
library(magrittr)
library(ggmap)
library(curl) # make the jsonlite suggested dependency explicit
map %>% removeMarker(layerId = "sfg")
map %>% removeMarker(layerId = "sfgsdf")
shiny::runApp()
runApp()
input$map_marker_mouseout
input$map_marker_mouseover
input$map_marker_click$id
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rural <- rgdal::readOGR("data/zonage/74_rural.shp")
urbain <- rgdal::readOGR("data/zonage/paris_urbain.shp")
rural$id
urbain$id
runApp()
socio$segment
strsplit(socio$segment, split = "_")
strsplit(x = socio$segment, split = "_")
strsplit(x = socio$segment, split = "\\_")
strsplit(x = socio$segment, split = "\_")
strsplit(x = as.character(socio$segment), split = "_")
lapply(strsplit(x = as.character(socio$segment), split = "_"), tail, -1)
lappy(lapply(strsplit(x = as.character(socio$segment), split = "_"), tail, -1), paste())
lapply(lapply(strsplit(x = as.character(socio$segment), split = "_"), tail, -1), paste())
lapply(lapply(strsplit(x = as.character(socio$segment), split = "_"), tail, -1), paste
)
lapply(lapply(strsplit(x = as.character(socio$segment), split = "_"), tail, -1), paste, collapse = " ")
unlist(lapply(lapply(strsplit(x = as.character(socio$segment), split = "_"), tail, -1), paste, collapse = " "))
runApp()
?addPolygons
runApp()
runApp()
?palette
colorRampPalette(colors = c("darkgrey", "darkgreen"))
runApp()
c(rural, urbain)
rbind(rural, urbain)
rbind(rural, urbain) -> test_bind
test_bind$zone <- factor("urbain", "rural")
test_bind$id
rural$id
test_bind$zone <- factor("rural", "urbain")
runApp()
runApp()
?colorBin()
install.packages('geojson')
route_74 <- rgdal::readOGR("data/DATA/routes_74.geojson", "OGRGeoJSON")
route_74 <- geojsonio::geojson_read("data/DATA/routes_74.geojson", what = "sp")
pal_zone <- colorFactor(palette = c("darkgreen", "darkgrey"), domain = zone$segment)
rural <- rgdal::readOGR("data/zonage/74_rural.shp")
urbain <- rgdal::readOGR("data/zonage/paris_urbain.shp")
zone <- rbind(rural, urbain)
zone$segment <- factor("rural", "urbain")
pal_zone <- colorFactor(palette = c("darkgreen", "darkgrey"), domain = zone$segment)
pal_zone()
pal_zone
pal_zone("rural")
pal_zone(factor("rural", levels = c('rural', 'urbain')))
